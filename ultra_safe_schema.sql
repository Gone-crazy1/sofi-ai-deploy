-- =======================================================
-- SOFI AI - CORRECTED SUPABASE SCHEMA FOR PAYSTACK
-- =======================================================
-- This version uses proper BIGINT references and follows best practices

-- Step 0: Check existing table structure
-- =======================================================
SELECT column_name, data_type 
FROM information_schema.columns 
WHERE table_name IN ('users', 'virtual_accounts');

-- Step 1: Create users table with all required columns
-- =======================================================
CREATE TABLE IF NOT EXISTS users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    telegram_chat_id TEXT UNIQUE NOT NULL,
    phone_number TEXT,
    full_name TEXT,
    email TEXT,
    paystack_customer_code TEXT,
    paystack_dva_id TEXT,
    paystack_account_number TEXT,
    paystack_bank_name TEXT,
    wallet_balance NUMERIC(15,2) DEFAULT 0.00,
    is_verified BOOLEAN DEFAULT FALSE,
    is_active BOOLEAN DEFAULT TRUE,
    pin_hash TEXT,
    pin_attempts INTEGER DEFAULT 0,
    pin_locked_until TIMESTAMP,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 2: Create virtual_accounts table
-- =======================================================
CREATE TABLE IF NOT EXISTS virtual_accounts (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    telegram_chat_id TEXT NOT NULL,
    account_number TEXT UNIQUE NOT NULL,
    account_name TEXT,
    bank_name TEXT,
    bank_code TEXT,
    paystack_customer_code TEXT,
    paystack_account_id TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 3: Create bank_transactions table (CORRECTED: user_id as BIGINT)
-- =======================================================
CREATE TABLE IF NOT EXISTS bank_transactions (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    transaction_type TEXT NOT NULL,
    amount NUMERIC(15,2) NOT NULL,
    reference TEXT UNIQUE,
    status TEXT DEFAULT 'pending',
    description TEXT,
    paystack_data JSONB,
    wallet_balance_before NUMERIC(15,2),
    wallet_balance_after NUMERIC(15,2),
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 4: Create transfer_recipients table (CORRECTED: user_id as BIGINT)
-- =======================================================
CREATE TABLE IF NOT EXISTS transfer_recipients (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    recipient_name TEXT NOT NULL,
    account_number TEXT NOT NULL,
    bank_code TEXT NOT NULL,
    bank_name TEXT,
    paystack_recipient_code TEXT UNIQUE,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 5: Create beneficiaries table (CORRECTED: user_id as BIGINT)
-- =======================================================
CREATE TABLE IF NOT EXISTS beneficiaries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT NOT NULL,
    beneficiary_name TEXT NOT NULL,
    account_number TEXT NOT NULL,
    bank_code TEXT NOT NULL,
    bank_name TEXT NOT NULL,
    nickname TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 6: Create paystack_webhook_logs table
-- =======================================================
CREATE TABLE IF NOT EXISTS paystack_webhook_logs (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    event_type TEXT NOT NULL,
    reference TEXT,
    payload JSONB NOT NULL,
    signature TEXT,
    processed BOOLEAN DEFAULT FALSE,
    processing_result JSONB,
    created_at TIMESTAMP DEFAULT NOW()
);

-- Step 7: Create user_settings table (CORRECTED: user_id as BIGINT)
-- =======================================================
CREATE TABLE IF NOT EXISTS user_settings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    user_id BIGINT UNIQUE NOT NULL,
    transfer_limit_daily NUMERIC(15,2) DEFAULT 1000000.00,
    transfer_limit_monthly NUMERIC(15,2) DEFAULT 10000000.00,
    require_pin_for_transfers BOOLEAN DEFAULT TRUE,
    notifications_enabled BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT NOW(),
    updated_at TIMESTAMP DEFAULT NOW()
);

-- Step 8: Create indexes for performance
-- =======================================================
CREATE INDEX IF NOT EXISTS idx_users_telegram_chat_id ON users(telegram_chat_id);
CREATE INDEX IF NOT EXISTS idx_users_paystack_customer_code ON users(paystack_customer_code);
CREATE INDEX IF NOT EXISTS idx_virtual_accounts_telegram_chat_id ON virtual_accounts(telegram_chat_id);
CREATE INDEX IF NOT EXISTS idx_virtual_accounts_account_number ON virtual_accounts(account_number);
CREATE INDEX IF NOT EXISTS idx_bank_transactions_user_id ON bank_transactions(user_id);
CREATE INDEX IF NOT EXISTS idx_bank_transactions_reference ON bank_transactions(reference);
CREATE INDEX IF NOT EXISTS idx_transfer_recipients_user_id ON transfer_recipients(user_id);
CREATE INDEX IF NOT EXISTS idx_beneficiaries_user_id ON beneficiaries(user_id);
CREATE INDEX IF NOT EXISTS idx_webhook_logs_event_type ON paystack_webhook_logs(event_type);
CREATE INDEX IF NOT EXISTS idx_user_settings_user_id ON user_settings(user_id);

-- Step 9: Insert test user for immediate testing
-- =======================================================
INSERT INTO users (telegram_chat_id, phone_number, full_name, email, wallet_balance) 
VALUES ('test_user_123', '+2348123456789', 'Test User', 'test@sofi.ai', 0.00)
ON CONFLICT (telegram_chat_id) DO NOTHING;

-- âœ… DONE - Database is ready for Paystack integration with proper data types!
